name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest

      - name: Prepare deployment files
        run: cp src/config/schema.sql ./schema.sql

      - name: Transfer Deployment Files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,Dockerfile,schema.sql"
          target: "~/epoch-gold/"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p "/home/${{ secrets.SSH_USER }}/epoch-gold"
            DOCKER_COMPOSE_FILE="/home/${{ secrets.SSH_USER }}/epoch-gold/docker-compose.yml"
            if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
              exit 1
            fi
            docker compose down --remove-orphans || true
            docker rm -f $(docker ps -aq) 2>/dev/null || true
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export DOCKER_IMAGE="${{ secrets.DOCKER_IMAGE }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export NODE_ENV=production
            export API_KEY="${{ secrets.API_KEY }}"
            docker compose --file $DOCKER_COMPOSE_FILE pull
            docker compose --file $DOCKER_COMPOSE_FILE up -d
            if [ $? -ne 0 ]; then
              docker compose --file $DOCKER_COMPOSE_FILE logs
              exit 1
            fi
            docker image prune -f
